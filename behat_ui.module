<?php
/**
 * @file
 * Main behat_ui file.
 */

use Behat\Testwork\ServiceContainer\Configuration\ConfigurationLoader;

/**
 * Implements hook_init().
 */
function behat_ui_init() {
  // Alerts break tests, so let's replace them by console.log
  // Clearly this is not the best approach... but the others didn't work! :(
  // I tried: Behat hooks (beforeStep, afterStep), set cookie on Behat, send
  // HTTP headers on Behat, etc.
  // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
//
//
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js('window.alert = function(message) { if (console) console.log(message); }', 'inline');

}

/**
 * Implements hook_menu().
 */
function behat_ui_menu() {
  $items = array();

  $items['admin/config/development/behat_ui'] = array(
    'title' => 'Behat UI',
    'description' => 'Automated tests using Behat/Mink',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_behat_ui_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/development/behat_ui/run'] = array(
    'title' => 'Run tests',
    'description' => 'Run automated tests',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/development/behat_ui/new'] = array(
    'title' => 'Create test',
    'description' => 'Create a new automated test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_behat_ui_new'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['behat-ui/status'] = array(
    'page callback' => '_behat_ui_status',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['behat-ui/autocomplete'] = array(
    'page callback' => '_behat_ui_autocomplete',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['behat-ui/kill'] = array(
    'page callback' => '_behat_ui_kill',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['behat-ui/download/%'] = array(
    'page callback' => '_behat_ui_download',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Behat Ui autocomplate.
 */
function _behat_ui_autocomplete($string) {
  $matches = array();

  $steps = explode('<br />', _behat_ui_steps());
  foreach ($steps as $step) {
    $title = preg_replace('/^\s*(Given|Then|When) \/\^/', '', $step);
    $title = preg_replace('/\$\/$/', '', $title);
    if (preg_match('/' . preg_quote($string) . '/', $title)) {
      $matches[$title] = $title;
    }
  }

  drupal_json_output($matches);
}

/**
 * Given a form_state, return a Behat scenario.
 */
function _behat_ui_generate_scenario($form_state) {
  $scenario = "@api";
  if ($form_state['values']['behat_ui_javascript']) {
    $scenario .= " @javascript";
  }
  $title = $form_state['values']['behat_ui_title'];
  $scenario .= "\nScenario: $title\n";

  $steps_count = count($form_state['values']['behat_ui_steps']);

  for ($i = 0; $i < $steps_count; $i++) {
    $type = $form_state['values']['behat_ui_steps'][$i]['type'];
    $step = $form_state['values']['behat_ui_steps'][$i]['step'];

    if (!empty($type) && !empty($step)) {
      // Blocks.
      $step = preg_replace('/\n\|/', "\n  |", preg_replace('/([:\|])\|/', "$1\n|", $step));
      $scenario .= "  $type $step\n";
    }
  }

  return $scenario;
}

/**
 * Behat UI get behat bin path.
 */
function _behat_ui_get_behat_bin_path() {
  return preg_replace('/[ ;&|,]/', '', \Drupal::config('behat_ui.settings')->get('behat_ui_behat_bin_path'));
}

/**
 * Behat UI get behat config path.
 */
function _behat_ui_get_behat_config_path() {
  return preg_replace('/[ ;&|,]/', '', \Drupal::config('behat_ui.settings')->get('behat_ui_behat_config_path'));
}

/**
 * Run a single test.
 */
function _behat_ui_run_single_test($form, &$form_state) {
  global $user, $base_root;

  $behat_bin = _behat_ui_get_behat_bin_path();
  $behat_config = _behat_ui_get_behat_config_path();

  // Write to temporary file.
  $file_user_time = 'user-' . $user->uid . '-' . date('Y-m-d_h-m-s');
  $file = $behat_config . '/features/tmp/' . $file_user_time . '.feature';
  $feature = $form_state['values']['behat_ui_feature'];
  $test = "Feature: $feature\n  In order to test \"$feature\"\n\n";
  $test .= _behat_ui_generate_scenario($form_state);
  $handle = fopen($file, 'w+');
  fwrite($handle, $test);
  fclose($handle);

  // Run file.
  $report_dir = $behat_config . '/reports/report-' . $file_user_time;
  $output = shell_exec("cd $behat_config; $behat_bin $file --format html --out $report_dir");

  $report_html_file_name_and_path = $report_dir . '/index.html';

  $report_html_handle = fopen($report_html_file_name_and_path, 'r');
  $report_html = fread($report_html_handle, filesize($report_html_file_name_and_path));
  fclose($report_html_handle);

  $output .= $report_html;

  unlink($file);
  return '<div id="behat-ui-output-inner">' . $output . '</div>';
}

/**
 * Behat Ui add step AJAX.
 */
function behat_ui_ajax_add_step($form, $form_state) {
  return $form['behat_ui_new_scenario']['behat_ui_steps'];
}


/**
 * Get available steps.
 */
function _behat_ui_steps() {
  if ($cache = \Drupal::cache()->get('behat_ui_steps')) {
    return $cache->data;
  }

  $behat_bin = _behat_ui_get_behat_bin_path();
  $behat_config_path = _behat_ui_get_behat_config_path();

  global $base_root;
  $cmd = "cd $behat_config_path; $behat_bin -dl | sed 's/^\s*//g' | sort";
  $output = shell_exec($cmd);
  $output = nl2br(htmlentities($output));
  \Drupal::cache('cache')->set('behat_ui_steps', $output);
  return $output;
}

/**
 * Get existing features.
 */
function _behat_ui_features() {
  $behat_config_path = \Drupal::config('behat_ui.settings')->get('behat_ui_behat_config_path');
  $features_path = 'features';

  // Attempt to load the config with Composer library first.
  $behat_config = load_behat_config();

  $features = array();

  if ($handle = opendir($behat_config_path . '/' . $features_path)) {
    while (FALSE !== ($file = readdir($handle))) {
      if (preg_match('/\.feature$/', $file)) {
        $feature = preg_replace('/\.feature$/', '', $file);
        $name = ucfirst(str_replace('_', ' ', $feature));
        $features[$feature] = $name;
      }
    }
  }
  return $features;
}




/**
 * Function to get tests status.
 */
function _behat_ui_status() {

  $behat_config_path = _behat_ui_get_behat_config_path();

  $pidfile = \Drupal::config('behat_ui.settings')->get('behat_ui_pidfile');
  $pid = empty($pidfile) ? 0 : intval(trim(file_get_contents($pidfile)));
  $outfile = \Drupal::config('behat_ui.settings')->get('behat_ui_outfile');
  $output = file_get_contents($behat_config_path . '/' . \Drupal::config('behat_ui.settings')->get('behat_ui_html_report_dir') . '/index.html');

  $running = FALSE;

  if ($pid) {
    try {
      $result = shell_exec(sprintf("ps %d", $pid));
      if (count(preg_split("/\n/", $result)) > 2) {
        $running = TRUE;
      }
    }
    catch (Exception $e) {
      // Do nothing.
    }

    if (!$running) {
      \Drupal::configFactory()->getEditable('behat_ui.settings')->set('behat_ui_pidfile', '')->save();
      \Drupal::configFactory()->getEditable('behat_ui.settings')->set('behat_ui_outfile', '')->save();
      \Drupal::configFactory()->getEditable('behat_ui.settings')->set('behat_ui_html_report_dir', '')->save();
    }
  }

  drupal_json_output(array('running' => $running, 'output' => $output));
}

/**
 * Function to kill a process.
 */
function _behat_ui_kill() {
  $pidfile = \Drupal::config('behat_ui.settings')->get('behat_ui_pidfile');
  $pid = empty($pidfile) ? 0 : intval(trim(file_get_contents($pidfile)));
  $response = FALSE;

  if ($pid) {
    try {
      $response = posix_kill($pid, SIGKILL);
    }
    catch (Exception $e) {
      $response = FALSE;
    }
  }

  drupal_json_output(array('response' => $response));
}

/**
 * Load Behat Config.
 *
 * Adding support for the Symfony yaml parser so everything can be setup
 * through Composer.
 *
 * @return array
 *   Behat config.
 */
function load_behat_config() {

  $behat_config = array();

  $behat_bin = _behat_ui_get_behat_bin_path();
  $behat_config_path = _behat_ui_get_behat_config_path();

  try {
    if (is_file($autoload = $behat_config_path . '/vendor/autoload.php')) {
      require $autoload;
    }
    else {

      $error_message = t('You must set up the project dependencies, run the following commands:') . PHP_EOL .
          'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
          'php composer.phar install' . PHP_EOL;

      drupal_set_message($error_message, 'error');
      \Drupal::logger('behat_ui')->notice($error_message, []);
    }

    $behat_config_factory = new ConfigurationLoader();
    $behat_config_factory->setConfigurationFilePath($behat_config_path . '/behat.yml');
    $behat_config = $behat_config_factory->loadConfiguration();

  }
  catch (ParseException $e) {
    drupal_set_message(t('Extension yaml is not loaded. Could not parse behat.yml file.'), 'error');
    $watchdog_message = t('Could not parse Behat config file, check Composer libraries, file permissions and Behat config: Error = @error', array('@error' => $e));
    \Drupal::logger('behat_ui')->notice($watchdog_message, []);
  }
  return ($behat_config);
}

/**
 * Save output.
 */
function _behat_ui_download($format) {

  $behat_bin = _behat_ui_get_behat_bin_path();
  $behat_config_path = _behat_ui_get_behat_config_path();

  if (($format === 'html' || $format === 'txt') && file_exists($output)) {

    $output = \Drupal::config('behat_ui.settings')->get('behat_ui_html_report_dir');

    $headers = array(
      'Content-Type' => 'text/x-behat',
      'Content-Disposition' => 'attachment; filename="behat_ui_output.' . $format . '"',
      'Content-Length' => filesize($output),
    );
    foreach ($headers as $key => $value) {
      drupal_add_http_header($key, $value);
    }
    if ($format === 'html') {
      readfile($output);
    }
    elseif ($format === 'txt') {
      drupal_add_http_header('Connection', 'close');

      $output = \Drupal::config('behat_ui.settings')->get('behat_ui_outfile');
      $plain = file_get_contents($output);
      echo drupal_html_to_text($plain);
    }
  }
  else {
    drupal_set_message(t('Output file not found. Please run the tests again in order to generate it.'), 'error');
    drupal_goto('admin/config/development/behat_ui');
  }
}
